#include "Wsp.h"
#include "task.h"
#include "netfsa.h"
#include "lfsaappl.h"
#include "Sttbl.h"
#include <stdio.h>
#include <string>
using namespace std;

bool ffs (unsigned long *dat, unsigned long *num);
void bbsc(int num, unsigned long *dat);
extern unsigned long bit[];
/*
unsigned long bit[]  = {
    bit0, bit1, bit2, bit3, bit4, bit5, bit6, bit7, bit8, bit9,
    bit10, bit11, bit12, bit13, bit14, bit15, bit16, bit17, bit18, bit19,
    bit20, bit21, bit22, bit23, bit24, bit25, bit26, bit27, bit28, bit29,
    bit30, bit31
};
*/
unsigned long *pbitw=bit;
//bool bbsc(int num, unsigned long *dat);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//				                   WSP
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
WSP::WSP()
{
    flink=0; // ????????? ?????? (??? ?????????? ???????? - ????????? ?? ?????? ???????
    flink=0; // ????????? ????? (????????? ?? ?????????? ???????
    bHead = true;
    pTask = nullptr;
    pFsaAppl = nullptr;
    adt=nullptr; adx=nullptr; ady=nullptr;
    arc_t=arc_b=nullptr; name="";
    mask=m_x=baza=0;
//	upr=0;
//	param=0;
    bCall = false;
    nNumCall=0;
}

WSP::~WSP()
{
// if (stack) delete[] stack;
//	Clear();
}

void WSP::Clear()
{
    WSP*	OldWsp;
//	if (blink != flink) {
    if (!bHead) {
        OldWsp = blink;
        if (pFsaAppl&&OldWsp->arc_b)
            if (OldWsp->arc_b->pNextState) {
                pTask->pNetFsa->cur_task->state =
                    OldWsp->arc_b->pNextState->szName;
            }
            else
                pTask->pNetFsa->cur_task->state = nullptr;
        else
            if (OldWsp->arc_t)
                pTask->pNetFsa->cur_task->state =
                    OldWsp->arc_t->pNextState->szName;
    }
    remque();
}
//===================================================================
//                                                             remque
//===================================================================
WSP* WSP::remque()
{
    if (pFsaAppl) {
        if (bHead) {
            pFsaAppl->pWSP=nullptr;
        }
        else {
            pFsaAppl->pWSP=blink;
        }
    }
    blink->flink= flink;			// ???. ???? ???? ? ??. ??-??
    flink->blink= blink;			// ???. ???? ? ? ? ? ??. ??-??
    blink = nullptr;
    flink = nullptr;
    return this;
}
//===================================================================
//                                                             insque
//===================================================================
void WSP::insque (WSP* b)
{
    WSP *bx;
    bx= b->flink; flink= b->flink; blink= b;
    b->flink= this; bx->blink = this;
}
//===================================================================
//                                                                  x
//===================================================================
void  WSP::x()
{
    string strName = pFsaAppl->FGetNameFsa();
    if (strName == "CFDelay") {
        if (string(arc_t->szSt2) == "00") {
            if (arc_t->pArcSource->ulMx == arc_t->pArcSource->ulRx && arc_t->pArcSource->ulRx == 1) {
            }
        }
    }
    pFsaAppl->p2pck = 0;
    arc_b= arc_t;	// ????? ?????? ???? ? ?????? ????????? (?????? ? arc_t ?????? ?????? ????)
                    // ?? ?????????? ?????? ? ??? ???	1) ????????? ????? ?????? ???? (????? ??????????? ???? (??. ????? ??????),
                    //									2) ????? ????? ????, ??????? ??????? ????????
                    //									3) nullptr, ???? ??????? ?? ?????? (?? arc_t ?????? ????? ?????? ????)
    if ( arc_t->pArcSource->ulMx ) {
        mask= arc_t->pArcSource->ulMx;
        m_x= mask;
x1:
        while ( !ffs(&mask, &baza) ) {
            mask &=~(pbitw[baza]);
            (pFsaAppl->*adx[baza])();
            if (string(arc_t->szSt2) == "00") {
            }

        }
        if (string(arc_t->szSt2) == "00") {
            if ((pFsaAppl->p2pck == 1) && (arc_t->pArcSource->ulMx == 1) && (arc_t->pArcSource->ulRx == 0) ) {
            }
            string strARC = string(arc_t->szSt1) + ","
                    + string(arc_t->szSt2) + ","
                    + string(arc_t->szPredicate) + ","
                    + string(arc_t->szAction);
        }
        if( (pFsaAppl->p2pck & arc_t->pArcSource->ulMx) == arc_t->pArcSource->ulRx ) {
            arc_b = arc_t;				// ??????????? arc_b ????? ????, ??? ??????? ????????? ??????? ????????
                                        // ? ??????, ???? arc_b != nullptr, ?? ??????? ????! ? ????????? - ??? ??????? ??? ?????????
            return;						// ???????, ????? ???? ? ???????? ???????? (?? ????? ???????? ? arc_b, ?? ?? ????? ? ? arc_t)
                                        // ?.?. ??? ??????? ???????? ? arc_b ? arc_t ????? ?????? ???? ? ???????? ???????? ????????
        }
        else {
            if (arc_t->pNextAtomArc) {
                arc_t = &arc_t->pNextAtomArc->FsaArc;			// ? arc_t ???????? ????? ????????? ????
                mask = arc_t->pArcSource->ulMx & ~m_x;
                m_x |= mask;
            }
            else {
                arc_t = arc_b; arc_b= 0; // ??? ??????? ???????????? ??? ??? ???????? ????????? -> arc_b ????????, ? arc_t ????? ?????? ????
                                            // ??????? ??? ????? ? ????? ??? ???????? ? arc_b
                return;
            }
        }
        goto x1;
    }
}
//===================================================================
//                                                                  y
//===================================================================
void  WSP::y()
{
    if ( arc_t->pArcSource->ulMy ) {
//        printf("p2-%o&m-%o=r-%o> \n", pFsaAppl->p2pck, arc_t->ulMaskX, arc_t->ulRegisterX);
        mask= arc_t->pArcSource->ulMy;
        ffs(&mask, &baza);
//		bbsc (baza, &mask);
        mask &=~(pbitw[baza]);
        (pFsaAppl->*ady[baza])();
        while( !ffs(&mask, &baza) ) {
//			bbsc (baza, &mask);
            mask &=~(pbitw[baza]);
            (pFsaAppl->*ady[baza])();
        }
    }
    if (arc_t->pNextState) {
        if (!bCall) {
            arc_t= &arc_t->pNextState->ListArc.pRoot->FsaArc;
        }
//		else {
//			LFsaArc *arc = &arc_t->pNextState->ListArc.pRoot->FsaArc;
//		}
    }
    else {
        arc_t= 0;
    }
    return;
}
